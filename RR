#! /bin/bash
Arrived=""
Arrived=($Arrived)
pn=() # Process Names
pt=() # Processing Time
ptc=(${pt[@]})
at=() # Arrival Time
Q=1
ta=($ta) #Endaround Time
ct=($ct) #Completion Time
wt=($wt) #Waiting Time
LongestName=""
TimeDiagram=($TimeDiagram) # Used for printing time diagram


function input() {
    # Validate input for the number of processes
	pn=""
    while true; do
        read -p "Enter Processes no. : " pn
        
        if (( $pn < 99 && $pn > 1)); then
            break
        else
            echo -e "\n\033[1;31mInvalid input. Please enter a valid positive integer for the number of processes.\033[0m\n"
        fi
    done
    
    for ((i = 0; i < ${pn} ; i++)); do
        echo
        read -p $'\033[1;37mEnter Arrival time and Processing time \033[1;31m(separated by space)\033[1;37m: \033[0m' atpt
        
        # Validate input for numeric values
        if [[ $atpt =~ ^[0-9]+[[:space:]][0-9]+$ ]]; then
            atpt=($atpt)
            at[$i]=${atpt[0]}
            pt[$i]=${atpt[1]}
            echo -e "\033[38;5;208mProcess $i - Arrival Time: ${at[$i]}, Processing Time: ${pt[$i]}\033[0m"
        else
            echo -e "\n\033[1;31mInvalid input. Please enter numeric values for Arrival time and Processing time.\033[0m\n"
            ((i--))  # Decrement i to re-enter values for the current process
        fi
    done
	ptc=(${pt[@]})
}

FillArray(){
local Index=$1 # Index of active process
local Start=$2 # Start of time interval process as active from
local End=$3   # End of time interval.
local Running="" # Holds string to append to current running process
local Waiting="" # Holds empty spaces to append to waiting processes
local i=0

# Fills the Running and Waiting strings with the appropriate string.
for((i=$Start;i<$End;i++))
do

# Add ▄ or space depending on number of digits in time.
# e.g. the number 20 adds two ▄ because it has 2 digits
for((length=0;length<${#i};length++))
do
Running+="▄"
Waiting+=" "
done
Running+="▄"
Waiting+=" "
done

for((i=0;i<${#pt[@]};i++))
do

if(($i==$Index))
then
#Running+="▄"
TimeDiagram[$i]+="$Running"
else
TimeDiagram[$i]+="${Waiting}"
fi

done

}



# Returns the sum of processing times for all processes
ProcessTimeSum(){
local sum=0
local i=0
for((i=0;i<${#ptc[@]};i++))
do
((sum+=ptc[i]))
done
echo "$sum"
}

# Returns the longest name for visual purposes
FindLongestName(){
LongestName="P$pn"
}

# This function adds spaces for visuals
AddSpaces(){
local Long=$1
local Short=$2
local Amount=""
local i=0
((Amount=Long-Short))
for((i=0;i<$Amount;i++))
do
printf " "
done 
}
PrintHorizontal(){
local Amount=$1
local HorizontalLines=""
for((i=0;i<=$Amount-1;i++))
do
HorizontalLines+="_"
done
printf $HorizontalLines
}


ShowTimeSchedule(){

# This loop prints the process name with its respective time diagram
local i=0;
for((i=0;i<${#pt[@]};i++))
do
local temp="P$i"
echo -n "P$i"
AddSpaces ${#LongestName} ${#temp}
printf "|\033[38;5;208m${TimeDiagram[i]}\033[0m\n"
done

# Prints row of numbers underneath schedule
# Also prints the row of _ above said numbers
local NumRow=""
for((i=0;i<$SumPT+1;i++))
do
NumRow+="$i "
done
local HorizontalLines=""
for((i=0;i<=${#NumRow}-1;i++))
do
HorizontalLines+="_"
done
AddSpaces ${#LongestName} 0
printf "|"
PrintHorizontal ${#NumRow}
echo
AddSpaces ${#LongestName} 0
printf "|$NumRow"
echo
}
ShowInfoTable(){
AddSpaces ${#LongestName} 0
# Variables for table headers for easy changing
local Arrival="Arrival"
local Processing="Processing"
local Completion="Completion"
local Turnaround="Turnaround"
local Waiting="Waiting"
local Header="|$Arrival|$Processing|$Completion|$Turnaround|$Waiting|"
echo $Header
local HorizontalLines=""
local i=0;

# Horizontal lines for visuals
PrintHorizontal ${#LongestName}
printf "|"
PrintHorizontal ${#Arrival}
printf "|"
PrintHorizontal ${#Processing}
printf "|"
PrintHorizontal ${#Completion}
printf "|"
PrintHorizontal ${#Turnaround}
printf "|"
PrintHorizontal ${#Waiting}
printf "|\n"

#Prints info for each process
for((i=0;i<${#pt[@]};i++))
do
# Print name
local temp="P$i"
echo -n "P$i"
AddSpaces ${#LongestName} ${#temp}
# Print Arrival Time
printf "|${at[i]}"
AddSpaces ${#Arrival} ${#at[i]}
# Print Processing Time
printf "|${pt[i]}"
AddSpaces ${#Processing} ${#pt[i]}
# Print Completion Time
printf "|${ct[i]}"
AddSpaces ${#Completion} ${#ct[i]}
# Print Turnaround Time
printf "|${ta[i]}"
AddSpaces ${#Turnaround} ${#ta[i]}
# Print Waiting Time
printf "|${wt[i]}"
AddSpaces ${#Waiting} ${#wt[i]}
echo "|"
done
echo -e "\n\n\n"
}

# Queue implementation

Queue=""
Result=""
QEnd=0
QStart=0

Deq(){


if(($QStart<$QEnd))
then
	Result=${Queue[QStart]}
	if((${pt[Result]}==0))
	then
		Result="-1"
	else
		((QStart++))
	fi

else
Result="-1"
fi


}

Enq(){
if((${pt[$1]}!=0))
then
Queue[$QEnd]=$1
((QEnd++))
fi
}
# -------------------------------

SumPT=0
SumAllPt(){
local i=0

for((i=0;i<${#pt[@]};i++))
do
((SumPT+=${pt[i]}))
done

}

GT=0
Previous=""
Current=""
Start=""
End=""


Duplicate=0
IsDuplicate(){
local Num=$1

local i=0
for((i=0;i<${#Arrived[@]};i++))
	do

	if [[ $Num == ${Arrived[i]} ]]
	then
		Duplicate=1
		break
	else
		Duplicate=0
	fi

done

}

NoP=0
Arr(){
local timer=$GT
local num=${#at[@]}
local c=$NoP
local i=0

for((i=0;i<$num;i++))
do

	if(($c==${#at[@]}))
	then
		break
	fi

	if((${at[i]}<$timer || ${at[i]}==$timer))
	then
		if((${#Arrived[@]}>0))
		then
			IsDuplicate $i
		fi
		if(($Duplicate==0))

		then
			Arrived[$c]=$i
			((c++))
			
		else
			((Duplicate=0))

		fi

	fi

done

}

AddArrived(){
# Add all newly arrived processes
Arr
local i=0

for((i=$NoP;i<${#Arrived[@]};i++))
do
	
	# echo enqueued ${pn[Arrived[i]]} at Timer = $GT
	Enq ${Arrived[i]}
done

 # echo -e "Arrived processes are: \"${Arrived[0]}\" \"${Arrived[1]}\""
 
	# echo number of arrived processes is: $NoP 
# echo -e "Queue has: ${Queue[@]}\n"
# Change count of arrived processes added to queue
NoP=${#Arrived[@]}
}

RR(){

GT=0
Start=$GT
SumAllPt
Arr # Check for processes arriving at time 0
# echo -e "Arrived processes are: \"${Arrived[0]}\" \"${Arrived[1]}\""
NoP=${#Arrived[@]} # Number of arrived processes
# echo "\"$NoP\""

local i=0
# Enqueue all arived processes at 0
for((i=0;i<$NoP;i++))
do
Enq ${Arrived[i]}
done
#Take first process to run
Deq
Current=$Result
if [[ $Current == "" ]]
then
Current=-1
fi

while(($GT<$SumPT))
do

	# If no process is in queue
	while(($Current==-1))
		do
		((Start=GT))
		((End++))
		((GT++))
		# Increase sum of processing time because 1 quantum was wasted
		((SumPT++))
		FillArray $Current $Start $End
		# Add all newly arrived processes at new GT
		# echo "End= $QEnd Start= $QStart"
		# echo "GT= $GT , SumPT = $SumPT"
		AddArrived
		# Check if there is a process was enqueued
		Deq
		Current=$Result
		# echo -e "Current is ${pn[Current]}\n"
		
	done

	# echo "Process : ${pn[Current]}"
	# echo "Remaining Time : ${pt[Current]}"
	# echo -e "Arrived : ${at[Current]}\n"



	Start=$GT
	# echo "Timer Before Loop = $GT"
	for((i=0;i<$Q;i++))
	do

		if((${pt[Current]}==0))
		then
			break
		fi

		((End++))
		((GT=End))
		((pt[Current]--))
		 AddArrived
		 
	# echo number of arrived processes is: $NoP 
	done

		if((${pt[Current]}==0))
		then
			ct[$Current]=$GT
			((ta[Current]=GT-at[Current]))
			((wt[Current]=ta[Current]-ptc[Current]))
		fi

	FillArray $Current $Start $End
	# Move Global Timer to End
	((GT=End))
	# echo "Timer After Loop = $GT"


	# echo "Enqueueing ${pn[Current]} Remaining Time ${pt[Current]}"
	# echo "Arrived processes ${Arrived[@]}"
	Enq $Current
	#echo number of arrived processes is: $NoP 
	# echo -e "Queue has: ${Queue[@]}\n"
	# echo "End= $QEnd Start= $QStart"
	Deq
	Current=$Result

	# echo "Next Process : ${pn[Current]}"
	# echo "Remaining Time : ${pt[Current]}"
	# echo -e "Arrived : ${at[Current]}\n"

	# echo "GT= $GT , SumPT = $SumPT"
	# echo "Processing time of ${pn[0]} is ${pt[0]}"
	# echo "Processing time of ${pn[1]} is ${pt[1]}"
	# echo "Processing time of ${pn[2]} is ${pt[2]}"
	# echo "Processing time of ${pn[3]} is ${pt[3]}"
	# echo -e "-------------------------------------------------\n"

done


}

# PreviousIndex=-1
# CurrentIndex=3
# Start=0
# End=1
# if((PreviousIndex != CurrentIndex))
# FillArray $PreviousIndex $Start $End
# Start=$End

clear
input
echo
FindLongestName
RR
ShowInfoTable
ShowTimeSchedule

